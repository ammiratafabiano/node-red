module.exports = function(RED) {
    function httpListener(config) {

        RED.nodes.createNode(this,config);
        this.prefix = config.prefix;
        var node = this;
        
        var port = this.prefix;
        
        const http = require('http');
        var fs = require('fs');
        
        node.status({fill:"blue",shape:"dot",text:"localhost:"+port});
        
        var storage = [];
        
		node.on('input', function(msg) {

			storage = msg.payload;
		
		});
        
		var server = http.createServer((request, response) => {
		
			let body = [];
			request.on('error', (err) => {
				console.error(err);
			}).on('data', (chunk) => {
				body.push(chunk);
			}).on('end', () => {
				body = Buffer.concat(body).toString();

				response.on('error', (err) => {
					console.error(err);
				});
			
				response.statusCode = 200;
				response.setHeader("Access-Control-Allow-Origin", "*");
				response.setHeader("Content-Type", "text/html");
				
				var url = request.url.split("?",2);
				
				if (request.url == "/available") {
					var availables = storage.filter(x => x.url.split("/")[x.url.split("/").length-1] == "available");
					
					var totals = [];	
					availables.forEach(function(element) {
						element.data.forEach(function(e) {
							totals.push(e);
						});
					});
					
					response.statusCode = 200;
					response.setHeader("Access-Control-Allow-Origin", "*");
					response.setHeader("Content-Type", "text/html");
					response.end(JSON.stringify(totals));
				}
				else {
					if (JSON.stringify(storage.filter(x => x.url == url[0])) != "[]") {
						response.statusCode = 200;
						response.setHeader("Access-Control-Allow-Origin", "*");
						response.setHeader("Content-Type", "text/html");
						
						result = storage.filter(x => x.url == url[0])[0].data;
						response.end(JSON.stringify(result));
					}
					else {
						console.log("Url non trovato.");
						response.statusCode = 404;
						response.end();
					}
				}
	
			});	
		}).listen(port);
		
		node.on('close', function() {
			server.close();
		});
    }
    RED.nodes.registerType("httpService",httpListener);
}