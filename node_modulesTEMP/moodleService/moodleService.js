module.exports = function(RED) {
	
    function getData(config) {
        RED.nodes.createNode(this,config);
        var node = this;
        node.status({fill:"red",shape:"dot",text:"disconnected"});
        
        var fs = require('fs');
        
        var availableTabs;
        
        fs.readFile('node_modules/moodleService/availableTabs.json', 'utf8', function (err, data) {
			if (!err) {
				availableTabs = JSON.parse(data);
			}
			else {
				node.status({fill:"red",shape:"dot",text:"missing availableTabs.json"});
			}
		});
		
        node.on('input', function(msg) {
            	
        	msg2 = RED.util.cloneMessage(msg);
        	msg2.topic = "/moodle/available";
        	msg2.payload = availableTabs;
        	node.send(msg2);
        	
        	if (msg.payload == true) {
        	
				var mysql = require('mysql');
		
				var con = mysql.createConnection({
					host: "localhost",
					user: "fabiano",
					password: "m00dl3;",
					database: "moodle",
					port: 3307
				});
		
				con.on('error', function(err) {
					node.status({fill:"red",shape:"dot",text:"connection error"});
				});

				con.connect(function(err) {
					if (!err) {
						
						node.status({fill:"blue",shape:"dot",text:"updating"});
						
						var count = 0;
						
						availableTabs.forEach(function(element) {
						
							var url = element.url;			
							var query = element.query;
													
							con.query(query, function (err, result) {
								if (!err) {
									msg.topic = url;
									if (element.details != undefined) {
									
										var MySql = require('sync-mysql');
										var connection = new MySql({
											host: "localhost",
											user: "fabiano",
											password: "m00dl3;",
											database: "moodle",
											port: 3307
										});
							
										function mergeArray(a1,a2) {
											var out = [];
											for (var i=0; i!=a1.length; i++) {
												out.push({ "value": a1[i], "name": a2[i] });
											}
											return out;
										}
										function allPossibleCases(arr,iter) {
											
											if (arr.length === 0) {
												return [];
											} 
											else if (arr.length ===1){
												var result = [];
												if (iter == 0) {
													var array = arr[0];
													array.forEach(function(el) {
														var element = [];
														element.push(el);
														result.push(element);
													});
												}
												else
													result = arr[0];
												
												return result;
											}
											else {
												var result = [];
												iter += 1;
												var allCasesOfRest = allPossibleCases(arr.slice(1),iter);
												for (var c in allCasesOfRest) {
													for (var i = 0; i < arr[0].length; i++) {
														var element = [];
														element.push(arr[0][i]);
														if (Array.isArray(allCasesOfRest[c])) {
															allCasesOfRest[c].forEach(function(e){
																element.push(e);
															});
														}
														else {
															element.push(allCasesOfRest[c]);
														}
														result.push(element.slice());
													}
												}
												return result;
											}
										}
										
										function isComplex(params) {
											for (var i = 0; i != params.length; i++) {
												if (Array.isArray(params[i])) return 1;
											}
											return 0;
										}
									
										function solveJSON(details) {
											if ((typeof details === "object") && (details !== null) && (! Array.isArray(details))) {
												var params = solveJSON(details.params);
												//console.log("----");
												//console.log(params);
												if (isComplex(params)) {
													var totalResults = [];
													var totalResultDB = [];
													
													allPossibleCases(params,0).forEach(function(element){
													
														var resultDB = connection.query(details.query, element);
														
														if (details.type != "root") {
														
															resultDB.forEach(function(element) {
																totalResultDB.push(element);
															});
														}
														else {																								
															var resultElement = { data: resultDB, params: element };
															totalResults.push(resultElement);
														}
														
													});
													
													if (details.type != "root") {
														var resultArrayId = Object.keys(totalResultDB).map(function(k) { return totalResultDB[k].id });
			
														if (paramValuesTemp.filter(x => x.name==details.paramName)[0] != undefined) {
															paramValuesTemp.filter(x => x.name==details.paramName)[0].elements = totalResultDB;
														}
														return resultArrayId;										
													}
													
													var out = { paramNames: details.paramNames, paramValues: paramValuesTemp, data: totalResults }
													return out;
												}
												else {
													var resultDB = connection.query(details.query, params);
													var resultArrayId = Object.keys(resultDB).map(function(k) { return resultDB[k].id });
													//var resultArrayName = Object.keys(resultDB).map(function(k) { return resultDB[k].name });
													if (paramValuesTemp.filter(x => x.name==details.paramName)[0] != undefined) {
														paramValuesTemp.filter(x => x.name==details.paramName)[0].elements=resultDB;
													}
													return resultArrayId;
												}
											}
											else if (Array.isArray(details)) {											
												var newDetails = details;
												
												for (var i = 0; i != details.length; i++) {
													newDetails[i] = solveJSON(details[i]);
												}
												return newDetails;
											}
											else {
												return details;
											}
										}
										var paramValuesTemp = element.details.paramValues;
										msg.payload = { chart: result, details: solveJSON(element.details) };
									
									}
									else {
										msg.payload = { chart: result };
									}
									node.send(msg);
									count += 1;
									if (count == availableTabs.length)
										node.status({fill:"green",shape:"dot",text:"done"});
								}
								else {
									node.status({fill:"red",shape:"dot",text:"internal error"});
								}
							});
						});	
					}
				});
			}
        });
        
        node.on('close', function() {
			node.status({fill:"red",shape:"dot",text:"disconnected"});
		});
    }
    RED.nodes.registerType("moodleService", getData);
}