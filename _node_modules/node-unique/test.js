jest.unmock('uuid');
jest.unmock('../unique');

describe('unique()', () => {

  it('should return a string', () => {
    const unique = require('./unique');

    const id = unique();

    expect(id).toEqual(jasmine.any(String));
  });

  it('should accept a Date', () => {
    const uuid = require('uuid');
    const unique = require('./unique');

    uuid.v4 = jest.fn().mockReturnValue('00000000000000000000000000000000');

    const id = unique(new Date(0));

    expect(id).toBe('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');
  });

});

describe('unique.getTimestamp()', () => {

  it('should return a Date', () => {
    const unique = require('./unique');

    const id = unique();
    const ts = unique.getTimestamp(id);

    expect(ts).toEqual(jasmine.any(Date));
  });

  it('should return epoch', () => {
    const unique = require('./unique');

    var epoch = new Date(0);
    const id = unique(epoch);
    const ts = unique.getTimestamp(id);

    expect(ts).toEqual(epoch);
  });

  it('should return now', () => {
    const unique = require('./unique');

    var now = new Date();
    const id = unique(now);
    const ts = unique.getTimestamp(id);

    expect(ts).toEqual(now);
  });

});
